#include <iostream>
#include <vector>
#include <climits>

using namespace std;

void floydWarshall(vector<vector<int>>& graph) {
    int V = graph.size();

    for (int k = 0; k < V; ++k) {
        for (int i = 0; i < V; ++i) {
            for (int j = 0; j < V; ++j) {
                if (graph[i][k] != INT_MAX && graph[k][j] != INT_MAX &&
                    graph[i][k] + graph[k][j] < graph[i][j]) {
                    graph[i][j] = graph[i][k] + graph[k][j];
                }
            }
        }
    }
}

int main() {
    int V, E;
    cin >> V >> E; // Number of vertices and edges

    // Initialize the graph with INT_MAX indicating no direct edge
    vector<vector<int>> graph(V, vector<int>(V, INT_MAX));

    for (int i = 0; i < V; ++i) {
        graph[i][i] = 0; // Distance to self is 0
    }

    for (int i = 0; i < E; ++i) {
        int u, v, w;
        cin >> u >> v >> w; // Input edges and weights
        graph[u][v] = w;
    }

    floydWarshall(graph);

    // Print the shortest paths
    for (int i = 0; i < V; ++i) {
        for (int j = 0; j < V; ++j) {
            if (graph[i][j] == INT_MAX) {
                cout << "INF ";
            } else {
                cout << graph[i][j] << " ";
            }
        }
        cout << endl;
    }

    return 0;
}
